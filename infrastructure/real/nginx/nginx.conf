user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip 압축 설정
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;

    # 서버 설정
    server {
        listen 80;
        server_name _;

        # 최대 파일 업로드 크기 설정
        client_max_body_size 50M;

        # 기본 파일 서빙 설정
        root /usr/share/nginx/html;
        index index.html;

        # 정적 파일 캐싱 설정
        location / {
            try_files $uri $uri/ /index.html;
        }

        # 캐싱 헤더 설정
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 30d;  # 브라우저 캐싱 기간을 30일로 설정
            add_header Cache-Control "public";
            try_files $uri $uri/ @fallback;
        }

        # 보안 헤더 설정
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-XSS-Protection "1; mode=block";

        # HTTP -> HTTPS 리다이렉트 설정 제거 (Ingress가 SSL 종료를 처리하므로 NGINX에서 리다이렉트 불필요)
        # if ($scheme != "https") {
        #     return 301 https://$host$request_uri;
        # }

        # 오류 처리 페이지 설정
        error_page 404 /404.html;
        location = /404.html {
            internal;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # 파일 크기 및 속도 제한 설정
        client_body_timeout 12;
        client_header_timeout 12;
        send_timeout 10;
        keepalive_timeout 15;
    }
}